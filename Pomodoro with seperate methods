<!DOCTYPE html>
<html>
<head>
//CSS
<style>
  /*Need to change the input field, make them circle fields, get rid of the boxes around the number/arrows, and just have arrows. 
Need to make everything bigger.
When timer is started, move timer div to center of page and make timer much larger. Could think about adding a dynamically changing countdown that represents how much time is left?*/

body{
    background-color: grey;
    color: black;
    text-align: center;
  }

  .all{
    padding: 10%;
  }

  .title{
    padding: 10%;
    font-size: 10vw;
  }

  .workTime, .breakTime{
    display: inline;
    font-size: 6vw;
    margin: 0;
    padding: 0;
  }

  .timer{
    padding: 30%;
  }


  input{
    width: 9vw;
    border: none;
    background-color: grey;
    font-size: 5vw;
    margin: 0 auto;
    padding: 0;
  }
  #settings{
  background-color: grey;
  margin: 0 auto;
  padding: 0;
  }

#time{
    margin: 0 auto;
    background-color: green;
    font-size: 20vw;
    width: 70%;
    margin: 0 auto;
    padding: 0;
    text-align: center;
  }
</style>
//End CSS

//Javascript
<script type = "text/javascript">
  //Need to make a function that stops the timer if the button is pressed again or remove the button all together. 
//Also need to finish the function so when breaktime is finished reset back to normal. Can add a variable equal to true 
//Timer is still off, may need to round a certain way?
//Instead of getting current time and time plus amount of minutes, why not just set variable equal to # of minutes in milliseconds and subtract 1000 every second?
//Instead of having timer function, just put function within the setInterval using workTime first and breakTime second. Won't allow me to use "workTime" and "breakTime" as variables in timer(time). Always starts timer(time) with the original value of workTime or breakTime instead of subtracting it...

var minutes;
var seconds;
var workTime;
var breakTime;
var countDown;
var timer;

  
  
$('#time').hide();
$('#reset').hide();

//When button pressed, retrieve values of each timer and start the timer countdown with workTime until finished, then breakTime.

$('#start').on("click touchend", function(){
  console.log('Button pressed');  
  
  $('.all').hide();
  $('#time').show();
  $('#reset').show();
  
  $('#reset').click(function(){
  location.reload();
})
  //If timer is running and button is pressed, stop the timer and change variable to false (variable that depicts whether timer is running or not) 
  
  
  
  $('#time').on("click touchend", function(){
    if (timer == true){
    timer = false;
    console.log('stopping timer, timer = false');
    stopTimer();
    return;
  }
  
  if (timer == false){
    timerFunc();
    return;
  }
    
  }).hover(function(){
    $('#time').css('cursor', 'pointer')});
  
  //Think about using recursion? 
  //function count(){
  //workTime -= 1000
  //countDown = setTimeout(function(){count},1000);
  //execute once with setTimeout, use recursion to call itself?
  
  workTime = (document.getElementById('work').value) * (60 * 1000);
  breakTime = (document.getElementById('break').value) * (60 * 1000);
  
  timerFunc();
});

function timerFunc(){
  //Track if timer is currently running or not.
  
  if (!timer){
    timer = true;    
  }
  
  if (breakTime <= 0){
    location.reload();
  }
  
  if (workTime > 0){
    workTime -= 1000;
    
    
    minutes = Math.floor((workTime % (1000*60*60)) / (1000*60));
    if (minutes < 10){
      minutes = "0" + minutes;
    }
    seconds = Math.floor ((workTime % (1000*60)) / 1000);
    if (seconds < 10){
      seconds = '0' + seconds;
    }
    document.getElementById('time').innerHTML = "Work" + "</br>" + minutes + ":" + seconds;
  }
  
  else{
    $('#time').css("background-color", "red");
    breakTime -= 1000;
    minutes = Math.floor((breakTime % (1000*60*60)) / (1000*60));
    seconds = Math.floor ((breakTime % (1000*60)) / 1000);
    document.getElementById('time').innerHTML = "BREAK" + "</br>" + minutes + ":" + seconds;
  }
  
  
  countDown = setTimeout(function(){timerFunc()},1000);
  
  
};

function stopTimer(){
  clearInterval(countDown);
}

</script>
//End Javascript

</head>
<div class = 'container-fluid all'>
  <div class = 'title'>
    Pomodoro Clock
  </div>
  <div id = 'settings'>
    <div class = 'workTime'>
      Work
    <input type = 'number' id = 'work' min = '0' value = '45'>
    </div>
    <div class = 'breakTime'>
      Break
      <input type = 'number' id = 'break' min = '0' value = '15'>
    </div>
  </div>
  <div class = 'timer'>
    <button class = 'btn' id = 'start'>Start</button>
  </div>
</div>
<p id = 'time'></p>
<button class = 'btn' id = 'reset'>Reset</button>
</html>














